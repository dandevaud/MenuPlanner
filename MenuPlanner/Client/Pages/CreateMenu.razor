@page "/CreateMenu"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using MenuPlanner.Shared.models
@using MenuPlanner.Client.Controls
@inject NavigationManager NavigationManager
@inject HttpClient Http
@attribute [Authorize]
<h3>Create a Menu</h3>

<div class="row">
    <EditForm Model="@menu" OnValidSubmit="@InsertMenu">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            Name: <InputText @bind-Value="menu.Name" class="form-control" />
        </div>
        <div class="form-group">
            Description: <textarea class="form-control" rows="3" @bind="menu.Description"></textarea>
        </div>

        <div class="custom-file">
            <input type="file" class="custom-file-input" id="customFile">
            <label class="custom-file-label" for="customFile">Add Pictures</label>
        </div>

        <br />

        <TimeOfDaySelector></TimeOfDaySelector>

        <div class="form-group">
            <input class="form-control search" @bind-value="@filter" @bind-value:event="oninput" name="searchText"
                   type="text" placeholder="Search..." autocomplete="off" spellcheck="false"
                   autocorrect="off" />
            <button onclick="@GetFilteredIngredients()" hidden></button>
        </div>

        @if (menu.Ingredients != null)
        {
            <ul>
                @foreach (var ingredient in menu.Ingredients)
                {
                    <li>@ingredient.Ingredient.Name</li>
                }
            </ul>
        }

        @foreach (var ingredient in foundIngredients)
        {
            <IngredientCard Ingredient="@ingredient" MenuIngredient="AddIngredientToMenu"></IngredientCard>
        }


        <br />

        <button type="submit" class="btn btn-success">Submit</button>
    </EditForm>

</div>

<br />
<br />
<a href="/MenuList">Back to List</a>


@code {
    private Menu menu = new Menu();

    private List<Ingredient> foundIngredients = new List<Ingredient>();

    private string filter = "";

    private async Task InsertMenu()
    {
        try
        {
            var response = await Http.PostAsJsonAsync<Menu>("api/Menus/Create", menu);

            if (response.IsSuccessStatusCode)
            {
                await response.Content.ReadFromJsonAsync<Menu>();
                NavigationManager.NavigateTo("MenuList");
            }
            else
            {
                NavigationManager.NavigateTo("CreateAccount");
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

    }

    private async Task GetFilteredIngredients()
    {
        if (filter.Length > 2)
        {
            foundIngredients = (await Http.GetFromJsonAsync<Ingredient[]>($"api/Ingredients/Filter?contains={filter}")).ToList();
        }
        else
        {
            foundIngredients = new List<Ingredient>();
        }
    }

    private void AddIngredientToMenu(MenuIngredient ingredient)
    {
        if (menu.Ingredients == null)
        {
            menu.Ingredients = new List<MenuIngredient>();
        }
        menu.Ingredients.Add(ingredient);
    }
}

