@page "/"
@using MenuPlanner.Shared.models
@inject NavigationManager NavigationManager
@inject PublicClient PublicClient

<AuthorizeView>
    <Authorized>
        <a href="/AddEditDeleteMenu/" class="btn btn-info" role="button">Add Menu</a>
    </Authorized>
</AuthorizeView>
<button class="btn btn-primary" type="button" @onclick="FilterToggle">Filter</button>

<div class="@collapse">
    <br />
    <div class="card card-body">
        <MenuFilter Filter="FilterMenu"></MenuFilter>
    </div>
</div>

<hr />

<h3>Menus</h3>

@if (menus == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card-deck">

        @foreach (var menu in menus)
        {
            <MenuCard Menu="@menu"></MenuCard>
        }

    </div>
}

@code {

    private Menu[] menus;

    private string collapse = "collapse";

    private string previousFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetMenus();
    }

    public async Task GetMenus()
    {
        menus = await PublicClient.Client.GetFromJsonAsync<Menu[]>("api/Menus");
        foreach (var menu in menus)
        {
            LazyLoadImages(menu);
        }
    }

    public async void LazyLoadImages(Menu menu)
    {
        menu.Images = await PublicClient.Client.GetFromJsonAsync<List<Image>>($"api/Menus/Images/{menu.MenuId}");
        StateHasChanged();
    }

    public void FilterToggle()
    {
        if (collapse == "collapse")
        {
            collapse = "collapse show";
        }
        else
        {
            collapse = "collapse";
        }
    }

    private async Task FilterMenu(string filter)
    {
        if (filter != previousFilter)
        {
            if (filter != string.Empty)
            {
                // to avoid uneeded requests and at least show one result
                if (menus.Length > 1 || filter.Length < previousFilter.Length)
                {
                    menus = await PublicClient.Client.GetFromJsonAsync<Menu[]>($"api/Menus/Filter?contains={filter}");
                }
            }
            else
            {
                menus = await PublicClient.Client.GetFromJsonAsync<Menu[]>("api/Menus");
            }
            previousFilter = filter;
        }
    }

}

