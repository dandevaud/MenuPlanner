@page "/AddEditDeleteMenu"
@page "/AddEditDeleteMenu/{Id:guid}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using MenuPlanner.Shared.models
@using MenuPlanner.Client.Controls.MenuControls
@using MenuPlanner.Client.Controls.IngredientControls
@inject NavigationManager NavigationManager
@inject HttpClient Http
@attribute [Authorize]

<h3>Edit Menu</h3>

@if (menu == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <EditForm Model="@menu" OnValidSubmit="@UpdateMenu">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                Name: <InputText @bind-Value="menu.Name" class="form-control"></InputText>
            </div>

            <div class="form-group">
                Description: <InputTextArea @bind-Value="menu.Description" class="form-control" rows="3"></InputTextArea>
            </div>

            <MenuImages Menu="@menu"></MenuImages>

            <StarRating Menu="@menu" IsEditable="true" Rating="@StoreRating"></StarRating>

            <TimeOfDaySelector Menu="@menu"></TimeOfDaySelector>
            <MenuSteps Menu="@menu"></MenuSteps>
            <h5>Ingredients:</h5>
            <IngredientSearch @bind-Ingredient="ingredient"></IngredientSearch>


            @if (ingredient.Name != null)
            {
                <IngredientCard Ingredient="@ingredient" MenuIngredientChanged="AddIngredientToMenu" UpdateMenuIngredient="UpdateIngredientToMenu" ToggleEditMode="true" RemoveMenuIngredient="RemoveMenuIngredient"></IngredientCard>
            }

            @if (menu.Ingredients != null)
            {
                @foreach (var menuIngredient in menu.Ingredients)
                {
                    <IngredientCard MenuIngredient="@menuIngredient" MenuIngredientChanged="AddIngredientToMenu" UpdateMenuIngredient="UpdateIngredientToMenu" ToggleEditMode="false" RemoveMenuIngredient="RemoveMenuIngredient"></IngredientCard>
                }
            }

            <br />

            <button type="submit" class="btn btn-success">Save</button>
            @if (Id != null)
            {
                <button @onclick="() => modal.Open()" class="btn btn-danger ml-1">Delete</button>
            }
        </EditForm>
    </div>
    <br />
    <br />
    <a href="/MenuList">Back to List</a>

    <Modal @ref="modal">
        <Title>Delete?</Title>
        <Body>
            <p>
                Are you sure to Delete?
            </p>
        </Body>
        <Footer>
            <button type="button" class="btn btn-primary" @onclick="DeleteMenu">Ok</button>
            <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modal.Close()">Cancel</button>
        </Footer>
    </Modal>
}


@code {

    [Parameter]
    public Guid? Id { get; set; }

    private Menu menu;

    private Ingredient ingredient = new Ingredient();

    private int rating;

    private Modal modal { get; set; }

    protected override async Task OnInitializedAsync()
    {

        if (Id == null)
        {
            menu = new Menu();
            return;
        }

        try
        {
            menu = await Http.GetFromJsonAsync<Menu>($"api/Menus/{Id}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }


    private async Task UpdateMenu()
    {
        SetRating();
        if (modal.modalClass == "show")
        {
            return;
        }
        HttpResponseMessage response;
        if (Id == null)
        {
            response = await Http.PostAsJsonAsync<Menu>("api/Menus", menu);
            menu = await response.Content.ReadFromJsonAsync<Menu>();
        }
        else
        {
            response = await Http.PutAsJsonAsync<Menu>($"api/Menus/{Id}", menu);

        }
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            string errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine(errorMessage);
            //Implement ErrorComponent
        }
    }

    private void RemoveMenuIngredient(MenuIngredient menuIngredient)
    {
        menu.Ingredients.Remove(menuIngredient);
    }

    private void AddIngredientToMenu(MenuIngredient menuIngredient)
    {
        if (menu.Ingredients == null)
        {
            menu.Ingredients = new List<MenuIngredient>();
        }
        //Multi ingredient Values Possible
        menu.Ingredients.Add(menuIngredient);

        UpdateIngredientToMenu(menuIngredient);
    }

    private void UpdateIngredientToMenu(MenuIngredient menuIngredient)
    {
        ingredient = new Ingredient();
        StateHasChanged();
    }

    private void SetRating()
    {
        if (rating > 0)
        {
            menu.AverageRating = ((menu.AverageRating * menu.Votes) + rating) / (menu.Votes + 1);
            menu.Votes++;
        }
    }

    private void StoreRating(int rating)
    {
        this.rating = rating;
    }

    public async Task DeleteMenu()
    {
        //TODO: add confirmation dialog
        bool confirm = true;
        if (confirm)
        {
            var response = await Http.DeleteAsync($"api/Menus/{Id}");

            if (response.IsSuccessStatusCode)
            {
                //var responseText = await response.Content.ReadAsStringAsync();
                NavigationManager.NavigateTo("/");
            }
            else
            {
                //NavigationManager.NavigateTo("MenuList");
            }
        }
    }

}

