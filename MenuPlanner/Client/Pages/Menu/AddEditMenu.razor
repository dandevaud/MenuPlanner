@page "/AddEditMenu"
@page "/AddEditMenu/{Id:guid}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using MenuPlanner.Shared.models
@using MenuPlanner.Client.Controls.MenuControls
@using MenuPlanner.Client.Controls.IngredientControls
@inject NavigationManager NavigationManager
@inject HttpClient Http
@attribute [Authorize]

<h3>Edit Menu</h3>

@if (menu == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <EditForm Model="@menu" OnValidSubmit="@UpdateMenu">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                Name: <InputText @bind-Value="menu.Name" class="form-control"></InputText>
            </div>

            <div class="form-group">
                Description: <InputTextArea @bind-Value="menu.Description" class="form-control" rows="3"></InputTextArea>
            </div>

            <MenuImages Menu="@menu"></MenuImages>

            @*<div class="form-group">
                Rating <InputNumber @bind-Value="rating" class="form-control" min="0" max="5"></InputNumber>
            </div>*@
            <StarRating Menu="@menu" IsEditable="true"></StarRating>


            <TimeOfDaySelector Menu="@menu"></TimeOfDaySelector>
            <MenuSteps Menu="@menu"></MenuSteps>
            <h5>Ingredients:</h5>
            <IngredientSearch @bind-Ingredient="ingredient"></IngredientSearch>


            @if (ingredient.Name != null)
            {
                <IngredientCard Ingredient="@ingredient" MenuIngredientChanged="AddIngredientToMenu" UpdateMenuIngredient="UpdateIngredientToMenu" ToggleEditMode="true" RemoveMenuIngredient="RemoveMenuIngredient"></IngredientCard>
            }

            @if (menu.Ingredients != null)
            {

                @foreach (var menuIngredient in menu.Ingredients)
                {
                    <IngredientCard MenuIngredient="@menuIngredient" MenuIngredientChanged="AddIngredientToMenu" UpdateMenuIngredient="UpdateIngredientToMenu" ToggleEditMode="false" RemoveMenuIngredient="RemoveMenuIngredient"></IngredientCard>
                }

            }

            <br />

            <button type="submit" class="btn btn-success">Save</button>
        </EditForm>
    </div>
    <br />
    <br />
    <a href="/MenuList">Back to List</a>
}



@code {

    [Parameter]
    public Guid? Id { get; set; }

    private Menu menu;

    private Ingredient ingredient = new Ingredient();

    protected override async Task OnInitializedAsync()
    {

        if (Id == null)
        {
            menu = new Menu();
            return;
        }

        try
        {
            menu = await Http.GetFromJsonAsync<Menu>($"api/Menus/{Id}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }


    private async Task UpdateMenu()
    {
        HttpResponseMessage response;
        if (Id == null)
        {
            response = await Http.PostAsJsonAsync<Menu>("api/Menus", menu);
            menu = await response.Content.ReadFromJsonAsync<Menu>();
        }
        else
        {
            response = await Http.PutAsJsonAsync<Menu>($"api/Menus/{Id}", menu);

        }
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("MenuList");
        }
        else
        {
            string errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine(errorMessage);
            //Implement ErrorComponent
        }
    }

    private async Task RemoveMenuIngredient(MenuIngredient menuIngredient)
    {

        try
        {
            var response = Http.DeleteAsync($"api/MenuIngredients/{menuIngredient.Id}");
            menu.Ingredients.Remove(menuIngredient);
            await response;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void AddIngredientToMenu(MenuIngredient menuIngredient)
    {
        if (menu.Ingredients == null)
        {
            menu.Ingredients = new List<MenuIngredient>();
        }
        //Multi ingredient Values Possible
        menu.Ingredients.Add(menuIngredient);

        UpdateIngredientToMenu(menuIngredient);
    }

    private void UpdateIngredientToMenu(MenuIngredient menuIngredient)
    {
        ingredient = new Ingredient();
        StateHasChanged();
    }

}

