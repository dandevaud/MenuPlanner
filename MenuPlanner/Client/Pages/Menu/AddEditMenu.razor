@page "/AddEditMenu"
@page "/AddEditMenu/{Id:guid}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using MenuPlanner.Shared.models
@using MenuPlanner.Client.Controls.MenuControls
@using MenuPlanner.Client.Controls.IngredientControls
@inject NavigationManager NavigationManager
@inject HttpClient Http
@attribute [Authorize]

<h3>Edit Menu</h3>

@if (menu == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <EditForm Model="@menu" OnValidSubmit="@UpdateMenu">
            <DataAnnotationsValidator />
            <ValidationSummary />



            <div class="form-group">
                Name: <InputText id="name" @bind-Value="menu.Name" class="form-control" />
            </div>

            <div class="form-group">
                Description: <textarea class="form-control" rows="3" @bind="menu.Description"></textarea>
            </div>

            <Carousel Images="@menu.Images"></Carousel>
            <div class="custom-file">
                <input type="file" class="custom-file-input" id="customFile">
                <label class="custom-file-label" for="customFile">Add Pictures</label>
            </div>


            <TimeOfDaySelector Menu="@menu"></TimeOfDaySelector>
            <MenuSteps Menu="@menu"></MenuSteps>
            <h5>Ingredients:</h5>
            <IngredientSearch @bind-Ingredient="ingredient"></IngredientSearch>



            @if (ingredient.Name != null)
            {
                <IngredientCard Ingredient="@ingredient" MenuIngredientChanged="AddIngredientToMenu" UpdateMenuIngredient="UpdateIngredientToMenu" ToggleEditMode="true" RemoveMenuIngredient="RemoveMenuIngredient"></IngredientCard>
            }

            @if (menu.Ingredients != null)
            {
              
                    @foreach (var menuIngredient in menu.Ingredients)
                    {
                        <IngredientCard MenuIngredient="@menuIngredient" MenuIngredientChanged="AddIngredientToMenu" UpdateMenuIngredient="UpdateIngredientToMenu" ToggleEditMode="false" RemoveMenuIngredient="RemoveMenuIngredient"></IngredientCard>
                    }
                
            }

            <br />

            <button type="submit" class="btn btn-success" @onclick="@UpdateMenu">Update</button>
        </EditForm>
    </div>
    <br />
    <br />
    <a href="/MenuList">Back to List</a>
}



@code {

    [Parameter]
    public Guid? Id { get; set; }

    private Menu menu;

    private Ingredient ingredient = new Ingredient();

    protected override async Task OnInitializedAsync()
    {

        if (Id == null)
        {
            menu = new Menu();
            return;
        }

        try
        {
            var response = await Http.GetAsync($"api/Menus/{Id}");
            if (response.IsSuccessStatusCode)
            {
                menu = await response.Content.ReadFromJsonAsync<Menu>();
                StateHasChanged();
            }
            else
            {
                NavigationManager.NavigateTo("MenuList");
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }


    private async Task UpdateMenu()
    {
        try
        {
            if (Id == null)
            {
                var response = await Http.PostAsJsonAsync<Menu>("api/Menus/Create", menu);
            }
            else
            {
                var response = await Http.PutAsJsonAsync<Menu>($"api/Menus/Edit/{Id}", menu);
            }
            NavigationManager.NavigateTo("MenuList");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task RemoveMenuIngredient(MenuIngredient menuIngredient)
    {

        try
        {
            var response = Http.DeleteAsync($"api/MenuIngredients/{menuIngredient.Id}");
            menu.Ingredients.Remove(menuIngredient);
            await response;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void AddIngredientToMenu(MenuIngredient menuIngredient)
    {
        if (menu.Ingredients == null)
        {
            menu.Ingredients = new List<MenuIngredient>();
        }
        //Multi ingredient Values Possible
        menu.Ingredients.Add(menuIngredient);
        
        UpdateIngredientToMenu(menuIngredient);
    }

    private void UpdateIngredientToMenu(MenuIngredient menuIngredient)
    {
        ingredient = new Ingredient();
        StateHasChanged();
    }

}

