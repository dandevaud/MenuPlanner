@page "/AddEditDeleteMenu"
@page "/AddEditDeleteMenu/{Id:guid}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using MenuPlanner.Shared.models
@using MenuPlanner.Client.Controls.MenuControls
@using MenuPlanner.Client.Controls.IngredientControls
@using MenuPlanner.Shared.models.enums
@inject NavigationManager NavigationManager
@inject HttpClient Http
@attribute [Authorize]

<h3>Edit Menu</h3>

@if (menu == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <EditForm Model="@menu" OnValidSubmit="@UpdateMenu">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                Name: <InputText @bind-Value="menu.Name" class="form-control"></InputText>
            </div>

            <div class="form-group">
                Description: <InputTextArea @bind-Value="menu.Description" class="form-control" rows="3"></InputTextArea>
            </div>

            <MenuImages Menu="@menu"></MenuImages>

            <StarRating Menu="@menu" IsEditable="true" Rating="@StoreRating"></StarRating>

            <EnumControls ProvidedEnum="@menu.TimeOfDay" TEnum="TimeOfDay"
                          UpdateEnum="@((TimeOfDay enu) => { menu.TimeOfDay |= enu; })"
                          RemoveEnum="@((TimeOfDay enu) => { menu.TimeOfDay &= ~enu; })"></EnumControls>
            <EnumControls ProvidedEnum="@menu.MenuCategory" TEnum="MenuCategory"
                          UpdateEnum="@((MenuCategory enu) => { menu.MenuCategory = enu; })"
                          RemoveEnum="@((MenuCategory enu) => { menu.MenuCategory = MenuCategory.Unknown;})"
                          isFlag="false"></EnumControls>
            <EnumControls ProvidedEnum="@menu.Season" TEnum="Season"
                          UpdateEnum="@((Season enu) => { menu.Season |= enu; })"
                          RemoveEnum="@((Season enu) => { menu.Season &= ~enu; })"></EnumControls>
            <MenuSteps Menu="@menu"></MenuSteps>
            <h5>Ingredients:</h5>
            <IngredientSearch DivClass="form-group" @bind-Ingredient="ingredient"></IngredientSearch>


            @if (ingredient.Name != null)
            {
                @if (menu.Ingredients != null && menu.Ingredients.Any(i => i.Ingredient.IngredientId.Equals(ingredient.IngredientId)))
                {
                    <IngredientCard MenuIngredient="@menu.Ingredients.FirstOrDefault(i => i.Ingredient.IngredientId.Equals(ingredient.IngredientId))" MenuIngredientChanged="AddIngredientToMenu" UpdateMenuIngredient="UpdateIngredientToMenu" ToggleEditMode="true" RemoveMenuIngredient="RemoveMenuIngredient"></IngredientCard>
                }
                else
                {
                    <IngredientCard Ingredient="@ingredient" MenuIngredientChanged="AddIngredientToMenu" UpdateMenuIngredient="UpdateIngredientToMenu" ToggleEditMode="true" RemoveMenuIngredient="RemoveMenuIngredient"></IngredientCard>
                }
            }
            
        <div class="card-columns">

            @if (menu.Ingredients != null)
            {
                @foreach (var menuIngredient in menu.Ingredients)
                {
                    <IngredientCard Css="m-2" MenuIngredient="@menuIngredient" MenuIngredientChanged="AddIngredientToMenu" UpdateMenuIngredient="UpdateIngredientToMenu" ToggleEditMode="false" RemoveMenuIngredient="RemoveMenuIngredient"></IngredientCard>
                }
            }
        </div>

            <br />
            <div class="btn-group">
                <SaveButton IsLoading="@isLoading"></SaveButton>
                @if (Id != null)
                {
                    <a @onclick="() => modal.Open()" class="btn btn-danger">Delete</a>
                }
                <a class="btn btn-secondary" href="/">Back to List</a>
            </div>
        </EditForm>
    </div>
    <br />
    <br />
    

    <Modal @ref="modal">
        <Title>Delete?</Title>
        <Body>
            <p>
                Are you sure to Delete?
            </p>
        </Body>
        <Footer>
            <button type="button" class="btn btn-primary" @onclick="DeleteMenu">Ok</button>
            <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modal.Close()">Cancel</button>
        </Footer>
    </Modal>
}


@code {

    [Parameter]
    public Guid? Id { get; set; }

    private Menu menu;

    private Ingredient ingredient = new Ingredient();

    private int rating;

    private bool isLoading = false;

    private Modal modal { get; set; }

    protected override async Task OnInitializedAsync()
    {

        if (Id == null)
        {
            menu = new Menu();
            return;
        }

        try
        {
            menu = await Http.GetFromJsonAsync<Menu>($"api/Menus/{Id}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }


    private async Task UpdateMenu()
    {
        try
        {
            isLoading = true;
            SetRating();
            HttpResponseMessage response;
            if (Id == null)
            {
                response = await Http.PostAsJsonAsync<Menu>("api/Menus", menu);
                menu = await response.Content.ReadFromJsonAsync<Menu>();
            }
            else
            {
                response = await Http.PutAsJsonAsync<Menu>($"api/Menus/{Id}", menu);

            }
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                string errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine(errorMessage);
    //Implement ErrorComponent
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private void RemoveMenuIngredient(MenuIngredient menuIngredient)
    {
        menu.Ingredients.Remove(menuIngredient);
    }

    private void AddIngredientToMenu(MenuIngredient menuIngredient)
    {
        if (menu.Ingredients == null)
        {
            menu.Ingredients = new List<MenuIngredient>();
        }
        if (menu.Ingredients.Any(mi => mi.Ingredient.IngredientId.Equals(menuIngredient.Ingredient.IngredientId)))
        {
            menu.Ingredients.Remove(menu.Ingredients.FirstOrDefault(i => i.Ingredient.IngredientId.Equals(menuIngredient.Ingredient.IngredientId)));
        }
        menu.Ingredients.Add(menuIngredient);

        UpdateIngredientToMenu(menuIngredient);
    }

    private void UpdateIngredientToMenu(MenuIngredient menuIngredient)
    {
        ingredient = new Ingredient();
        StateHasChanged();
    }

    private void SetRating()
    {
        if (rating > 0)
        {
            menu.AverageRating = ((menu.AverageRating * menu.Votes) + rating) / (menu.Votes + 1);
            menu.Votes++;
        }
    }

    private void StoreRating(int rating)
    {
        this.rating = rating;
    }

    public async Task DeleteMenu()
    {
        bool confirm = true;
        if (confirm)
        {
            var response = await Http.DeleteAsync($"api/Menus/{Id}");

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/");
            }
        }
    }

}

