@page "/ingredientList"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using MenuPlanner.Shared.models.enums
@using MenuPlanner.Shared.models
@inject HttpClient Http
@attribute [Authorize]

<h3>Ingredients</h3>

@if (ingredients == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h5>Add Ingredient</h5>
    <div class="row">
        <EditForm Model="@newIngredient" OnValidSubmit="@AddIngredient">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                Name: <InputText @bind-Value="newIngredient.Name" class="form-control" />
            </div>

            <div class="form-group">
                Calories: <InputNumber @bind-Value="newIngredient.Calories" class="form-control" />
            </div>

            <div class="form-group">
                Price (1 gram): <InputNumber @bind-Value="newIngredient.Price" class="form-control" />
            </div>

            <div class="form-group">
                Category:
                <InputSelect @bind-Value="newIngredient.Category" class="form-control" disabled="@isCategoryDisabled">
                    @foreach (var value in Enum.GetValues(typeof(IngredientCategory)))
                        {
                        <option>@value</option>
                        }
                </InputSelect>
            </div>

            <div class="form-group">
                Parent Ingredient:
                <InputSelect @bind-Value="parentIngredient" @oninput="StoreParentIngredient" class="form-control">
                    <option></option>
                    @foreach (var value in ingredients)
                        {
                        <option>@value.Name</option>
                        }
                </InputSelect>
            </div>
            <button type="submit" class="btn btn-success">Save</button>
        </EditForm>
    </div>

    <br />
    <br />

    <h5>Ingredient List</h5>

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Category</th>
                <th>Parent Ingredient</th>
                <th>Calories</th>
                <th>Price</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ingredient in ingredients)
            {
                <tr>
                    <td>@ingredient.Name</td>
                    <td>@ingredient.Category</td>
                    <td>@ingredient.ParentIngredients</td>
                    <td>@ingredient.Calories</td>
                    <td>@ingredient.Price</td>
                    <td><a @onclick="(() => newIngredient = ingredient)" class="btn btn-primary">Edit</a></td>
                    <td><a @onclick="(() => DeleteIngredient(ingredient.IngredientId))" class="btn btn-danger">Delete</a></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private Ingredient[] ingredients;

    private Ingredient newIngredient = new Ingredient();

    private string parentIngredient;

    private bool isCategoryDisabled;

    protected override async Task OnInitializedAsync()
    {
        await LoadIngredients();
    }

    private async Task AddIngredient()
    {
        if (!string.IsNullOrEmpty(parentIngredient))
        {
            var foundIngredient = ingredients.FirstOrDefault(i => i.Name == parentIngredient);
            newIngredient.ParentIngredients = new List<Ingredient>();
            newIngredient.ParentIngredients.Add(foundIngredient);
        }
        await Http.PostAsJsonAsync<Ingredient>("api/Ingredients", newIngredient);
        newIngredient = new Ingredient();
        isCategoryDisabled = false;
        parentIngredient = null;
        await LoadIngredients();
    }

    private async Task DeleteIngredient(Guid id)
    {
        var response = await Http.DeleteAsync($"api/Ingredients/{id}");

        if (response.IsSuccessStatusCode)
        {
            var responseText = await response.Content.ReadAsStringAsync();

            await LoadIngredients();

        }
        else
        {
            //todo
        }
    }

    private async Task LoadIngredients()
    {
        try
        {
            ingredients = await Http.GetFromJsonAsync<Ingredient[]>("api/Ingredients");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void StoreParentIngredient(ChangeEventArgs e)
    {
        var value = (string)e.Value;
        if (!string.IsNullOrEmpty(value))
        {
            var foundIngredient = ingredients.FirstOrDefault(i => i.Name == value);
            newIngredient.Category = foundIngredient.Category;
            isCategoryDisabled = true;
        }
        else
        {
            newIngredient.Category = IngredientCategory.Unknown;
            isCategoryDisabled = false;
        }
    }

}

