@using MenuPlanner.Shared.models
@using MenuPlanner.Shared.models.enums
@using MenuPlanner.Shared.models.Search
@inject PublicClient PublicClient

<EditForm Model="searchModel" OnValidSubmit="@GetMenus">
    <fieldset>
        <div class="row g-3 m-3 form-group">
            <div class="col col-9">
                <input type="search" @bind="searchString" id="menuSearch" class="form-control m-0" placeholder="Search" />

            </div>
            <div class="col col-1">
                <button type="submit" class="btn btn-primary form-control m-0">
                    <i class="fas fa-search"></i>
                </button>
            </div>
            <div class="col col-2">
                @if (isAdvanced)
                {
                    <select @onchange="() => isAnyMatch = !isAnyMatch" class="form-control">
                        <option value=true selected>Any Match</option>
                        <option value=false>By Name</option>
                    </select>
                }
                else
                {
                    <div class="btn-group" role="group">
                        <button class="btn btn-primary" @onclick="@ChangeAdvanced" type="button">Advanced</button>
                        <button class="btn btn-secondary" @onclick="Reset" type="reset"><i class="fa fa-redo" /></button>
                    </div>
                }
            </div>
        </div>
        <div class="row m-4 form-group" hidden="@(!isAdvanced)">
            <label for="ingredient">Ingredient</label>
            <div id="ingredient" class="form-control" style="min-height: 40px">
                @foreach (var ingredient in searchModel.Ingredients)
                {
                    <div class="alert alert-secondary alert-dismissible d-inline number m-1 p-1">
                        @ingredient.Name <i class="fa fa-window-close ml-1" @onclick="() => RemoveIngredient(ingredient)"></i>
                    </div>
                }
            </div>
            <IngredientSearch InputClass="form-control" DivClass="px-0" Ingredient="ing" IngredientChanged="AddToIngredientList"></IngredientSearch>
        </div>
        <div class="row m-4 form-group" hidden=@(!isAdvanced)>
            <div class="col col-4">
                <label for="TimeOfDay" class="form-label">Time of Day</label>
                <ul id="TimeOfDay" class="list-group">

                    @foreach (var e in Enum.GetValues<TimeOfDay>())
                    {
                        @if (!e.Equals(TimeOfDay.Unknown))
                        {
                            <li class="list-group-item @GetActiveAttribute(e)" @onclick="@(args => selectedEnums.UpdateValues(e))">@e.ToString()</li>
                        }
                    }
                </ul>
            </div>
            <div class="col col-4">
                <label for="Season" class="form-label">Season</label>
                <ul id="Season" class="list-group">
                    @foreach (var e in Enum.GetValues<Season>())
                    {
                        @if (!e.Equals(Season.Unknown))
                        {
                            <li class="list-group-item @GetActiveAttribute(e)" @onclick="@(args => selectedEnums.UpdateValues(e))">@e.ToString()</li>
                        }
                    }
                </ul>
            </div>
            <div class="col col-4">
                <label for="MenuCategory" class="form-label">Menu Category</label>
                <ul id="MenuCategory" class="list-group">
                    @foreach (var e in Enum.GetValues<MenuCategory>())
                    {
                        @if (!e.Equals(MenuCategory.Unknown))
                        {
                            <li class="list-group-item @GetActiveAttribute(e)" @onclick="@(args => selectedEnums.UpdateValues(e))">@e.ToString()</li>
                        }
                    }
                </ul>


            </div>
        </div>

        <div class="row" hidden=@(!isAdvanced)>
            <div class="col col-6"></div>
            <div class="col col-6 btn-group" role="group">
                <button class="btn btn-secondary" @onclick="@Reset" type="reset"><i class="fa fa-redo" /> Reset</button>
                <button class="btn btn-danger" @onclick="@ChangeAdvanced" type="button"><i class="fa fa-times-circle" /> Close</button>
                <button class="btn btn-success" type="submit"><i class="fa fa-search" /> Search</button>
            </div>
        </div>
    </fieldset>
</EditForm>


@code {
    [Parameter]
    public Menu[] Results { get; set; }

    [Parameter]
    public EventCallback<Menu[]> ResultsChanged { get; set; }

    public delegate R HandleList<T, R>(T value);

    private MenuSearchRequestModel searchModel;
    private SelectedEnums selectedEnums = new SelectedEnums();

    private Ingredient ing;

    private string searchString = String.Empty;

    private Boolean isAdvanced = false;

    private bool isAnyMatch = true;

    private class SelectedEnums
    {
        public List<TimeOfDay> TimeOfDays { get; set; } = new List<TimeOfDay>();
        public List<MenuCategory> MenuCategories { get; set; } = new List<MenuCategory>();
        public List<Season> Seasons { get; set; } = new List<Season>();

        public void UpdateValues<T>(T provided) where T : struct, Enum
        {
            CheckTypeAndHandleList(provided, true, (TimeOfDay t) =>
            {
                return RemoveOrAddToList(TimeOfDays, t);
            }, (value =>
            {
                return RemoveOrAddToList(Seasons, value);
            }), value =>
            {
                return RemoveOrAddToList(MenuCategories, value);
            });
        }

        public bool IsSelected<T>(T provided) where T : struct, Enum
        {
            return CheckTypeAndHandleList(provided, false, new HandleList<TimeOfDay, bool>((TimeOfDay t) => { return TimeOfDays.Contains(t); }), new HandleList<Season, bool>((Season s) => { return Seasons.Contains(s); }), new HandleList<MenuCategory, bool>((MenuCategory m) => { return MenuCategories.Contains(m); }));
        }

        private R CheckTypeAndHandleList<T, R>(T provided, R defaultReturn, HandleList<TimeOfDay, R> handleTimeOfDay, HandleList<Season, R> handleSeason, HandleList<MenuCategory, R> handleMenuCategory) where T : struct, Enum where R : struct
        {
            if (provided is TimeOfDay day)
            {
                return handleTimeOfDay(day);
            }
            else if (provided is MenuCategory category)
            {
                return handleMenuCategory(category);
            }
            else if (provided is Season season)
            {
                return handleSeason(season);
            }
            return defaultReturn;
        }

        private bool RemoveOrAddToList<T>(List<T> list, T element) where T : struct, Enum
        {
            if (list.Contains(element)) list.Remove(element);
            else list.Add(element);
            return true;
        }

    }

    private void RemoveIngredient(Ingredient ingr)
    {
        searchModel.Ingredients.Remove(ingr);
        StateHasChanged();
    }

    private void AddToIngredientList(Ingredient ingr)
    {
        if (!searchModel.Ingredients.Contains(ingr)) searchModel.Ingredients.Add(ingr);
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        searchModel = new MenuSearchRequestModel();
    }

    private string GetActiveAttribute<T>(T option) where T : struct, Enum
    {
        if (selectedEnums.IsSelected(option)) return "active";
        return "";
    }

    private void ChangeAdvanced()
    {
        isAdvanced = !isAdvanced;
    }

    private async Task Reset()
    {
        isAdvanced = false;
        var list = await PublicClient.Client.GetFromJsonAsync<List<Menu>>("api/Menus");
        Results = list.ToArray();
        var resultChange = ResultsChanged.InvokeAsync(Results);
        selectedEnums.MenuCategories = new List<MenuCategory>();
        selectedEnums.Seasons = new List<Season>();
        selectedEnums.TimeOfDays = new List<TimeOfDay>();
        searchModel.Ingredients = new List<Ingredient>();
        searchString = String.Empty;
        await resultChange;
    }

    private void UpdateList<T>(ChangeEventArgs e) where T : struct, Enum
    {
        T selected;
        Enum.TryParse<T>(e.Value.ToString(), out selected);
        selectedEnums.UpdateValues<T>(selected);

    }

    private bool EnumHasFlag<T>(T searchEnum, T toCheck) where T : struct, Enum
    {
        return searchEnum.HasFlag(toCheck);
    }

    private async Task GetMenus()
    {
        isAdvanced = false;
        selectedEnums.MenuCategories.ForEach(e => searchModel.MenuCategory |= e);
        selectedEnums.Seasons.ForEach(e => searchModel.Season |= e);
        selectedEnums.TimeOfDays.ForEach(e => searchModel.TimeOfDay |= e);

        if (isAnyMatch)
        {
            searchModel.Filter = searchString;
        }
        else
        {
            searchModel.Name = searchString;
        }

        var response = await PublicClient.Client.PostAsJsonAsync<MenuSearchRequestModel>("api/Search/MenuBy", searchModel);
        var list = await response.Content.ReadFromJsonAsync<List<Menu>>();
        Results = list.ToArray();
        await ResultsChanged.InvokeAsync(Results);
    }
}
