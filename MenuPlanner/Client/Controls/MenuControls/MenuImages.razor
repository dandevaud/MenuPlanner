@using System.IO
@using MenuPlanner.Shared.models
@using Org.BouncyCastle.Bcpg
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats
@using SixLabors.ImageSharp.Formats.Jpeg
@using SixLabors.ImageSharp.Processing
@using Image = MenuPlanner.Shared.models.Image
@inject NavigationManager NavigationManager;

<div class="form-group">
    @if (Menu.Images != null)
    {
        @foreach (var image in Menu.Images)
        {
    <span class="picture">
        @if (isNew(image))
        {
            <img src="data:image/jpeg;base64, @(Convert.ToBase64String(image.ImageBytes))" alt="@image.AlternativeName" height="200" />
        }
        else
        {
            <img src="@GetImagePath(image)" alt="@image.AlternativeName" height="200" />
        }
        <a class="remove-pic" role="button" @onclick="() => RemoveImage(image)">🗙</a>
    </span>
            <span>&nbsp;</span>
        }
    }
    <br />
    <br />
    <div class="custom-file">
        <InputFile OnChange="OnInputFileChange" class="custom-file-input" multiple/>
        <label class="custom-file-label">Add Pictures</label>
    </div>
    <br />
    <p>@filesMessage</p>
</div>

@code {

    [Parameter]
    public Menu Menu { get; set; }

    private IReadOnlyList<IBrowserFile> selectedFiles;
    private string filesMessage = "No file(s) selected";

    private async void OnInputFileChange(InputFileChangeEventArgs e)
    {
        if (Menu.Images == null)
        {
            Menu.Images = new List<Image>();
        }
        var maxFiles = 10;
        var format = "image/jpeg";

        selectedFiles = e.GetMultipleFiles(maxFiles);
        foreach (var imageFile in selectedFiles)
        {
            try
            {
                using var imageCrop = await SixLabors.ImageSharp.Image.LoadAsync(imageFile.OpenReadStream());
                await using var memoryStream = new MemoryStream();
                var min = imageCrop.Width > imageCrop.Height ? imageCrop.Height : imageCrop.Width;
                imageCrop.Mutate(x => x.Crop(min, min));
                imageCrop.Mutate(x => x.Resize(400, 400));

                await imageCrop.SaveAsync(memoryStream,new JpegEncoder());

                var buffer = new byte[memoryStream.Length];
                await memoryStream.ReadAsync(buffer);

                Image image = new Image
                {
                    ImageBytes = buffer,
                    AlternativeName = imageFile.Name,
                    Name = imageFile.Name

                };

                Menu.Images.Add(image);
            }
            catch (Exception)
            {
                Console.WriteLine("Not a valid jpg File");
            }
        }
        filesMessage = $"{selectedFiles.Count} file(s) selected";
        this.StateHasChanged();
    }

    private bool isNew(Image image)
    {
        return image.ImageBytes.Length != 0;
    }

    private string GetImagePath(Image img)
    {
        return Path.Combine(NavigationManager.BaseUri,img.Path.ToString());
    }

    private void RemoveImage(Image image)
    {
        Menu.Images.Remove(image);
    }

}
