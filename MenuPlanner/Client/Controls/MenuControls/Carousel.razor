@using System.Timers;
@using MenuPlanner.Shared.models
@using System.IO
@inject PublicClient PublicClient

@if (Menu.Images == null)
{
    <div style="height: 2500px;" class="text-center pt-5">Loading...</div>
}
else if (Menu.Images.Count == 0)
{
    <div style="height: 250px;" class="text-center pt-5">No images</div>
}
else
{
    <div class="card-img-top">
        <div class="carousel slide">
            @if (Menu.Images.Count > 1)
            {
                <ol class="carousel-indicators">
                    @for (int i = 0; i < Menu.Images.Count; i++)
                    {
                        int copiedIndex = i;
                        <li class="@GetActive()" @onclick="() => SetActiveImageIndex(copiedIndex)"></li>
                    }
                    @ResetRenderCounter()
                </ol>
            }
            <div class="carousel-inner" >
                @foreach (var image in Menu.Images)
                {
                    <div class="text-center carousel-item @GetActive()">
                        <!-- TODO: Read correct content type, or add it in the model and add it on reading file -->
                       
                            <img class="d-block w-100" src="@GetSource(image)" alt="@image.AlternativeName" style="height: 250px;">
                       
                    </div>
                }
                @ResetRenderCounter()
            </div>
            @if (activeImageIndex > 0 && Menu.Images.Count > 1)
            {
                <a class="carousel-control-prev" role="button" @onclick="OnPreviousClicked">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="sr-only">Previous</span>
                </a>
            }
            @if (activeImageIndex < Menu.Images.Count - 1 && Menu.Images.Count > 1)
            {
                <a class="carousel-control-next" role="button" @onclick="OnNextClicked">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="sr-only">Next</span>
                </a>
            }
        </div>
    </div>
}


@code {

    [Parameter]
    public Menu Menu { get; set; }

    private int carouselRenderIndex = -1;
    private int activeImageIndex = 0;
    private Timer scrollTimer = null;

    private string GetSource(Image img)
    {
        if (string.IsNullOrEmpty(img.Path))
        {
           return $"data: image / jpeg; base64,{Convert.ToBase64String(img.ImageBytes)}";
        }
        else
        {
            return $"{Path.Combine(PublicClient.Client.BaseAddress.AbsolutePath, img.Path)}";
        }
    }

    protected override Task OnParametersSetAsync()
    {
        int scrollMilliseconds = 2500;

        scrollTimer?.Stop();

        if (scrollTimer == null)
        {
            scrollTimer = new Timer();
            scrollTimer.Elapsed += (o, e) =>
            {

                activeImageIndex += 1;

                if (activeImageIndex > (Menu.Images?.Count - 1 ?? 0))
                {
                    activeImageIndex = 0;
                }

                this.InvokeAsync(() =>
                {
                    this.StateHasChanged();
                });
            };
        }
        scrollTimer.Interval = scrollMilliseconds;
        scrollTimer?.Start();
        return base.OnParametersSetAsync();
    }

    private string GetActive()
    {
        string imageStateClass = string.Empty;

        carouselRenderIndex++;

        if (carouselRenderIndex == activeImageIndex)
        {
            imageStateClass = "active";
        }
        return imageStateClass;
    }

    private string ResetRenderCounter()
    {
        carouselRenderIndex = -1;
        return null;
    }

    protected void OnNextClicked()
    {
        carouselRenderIndex = -1;
        activeImageIndex += 1;
    }

    protected void OnPreviousClicked()
    {
        carouselRenderIndex = -1;
        activeImageIndex -= 1;
    }

    private void SetActiveImageIndex(int newIndex)
    {
        carouselRenderIndex = -1;
        activeImageIndex = newIndex;
    }

}
