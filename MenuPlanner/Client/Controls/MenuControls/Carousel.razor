@using MenuPlanner.Shared.models

@if (Images == null || Images.Count == 0)
{
    <img src="images/food.png" class="card-img-top mx-auto" alt="Menu image" style="max-width: 300px;">
}
else
{
    <div class="card-img-top">
        <div class="carousel slide">
            @if (Images.Count > 1)
            {
                <ol class="carousel-indicators">
                    @foreach (var image in Images)
                    {
                        <li class="@GetActive()"></li>
                    }
                    @ResetRenderCounter();

                </ol>
            }
            <div class="carousel-inner">
                @foreach (var image in Images)
                {
                    <div class="carousel-item @GetActive()">
                        <!-- TODO: Read correct content type, or add it in the model and add it on reading file -->
                        <img src="data:image/jpeg;base64, @(Convert.ToBase64String(image.ImageBytes))" alt="@image.AlternativeName">
                    </div>
                }
                @ResetRenderCounter();
            </div>
            @if (activeImageIndex > 0 && Images.Count > 1)
            {
                <a class="carousel-control-prev" role="button" @onclick="OnPreviousClicked">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="sr-only">Previous</span>
                </a>
            }
            @if (activeImageIndex < Images.Count - 1 && Images.Count > 1)
            {
                <a class="carousel-control-next" role="button" @onclick="OnNextClicked">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="sr-only">Next</span>
                </a>
            }
        </div>
    </div>
}


@code {

    [Parameter]
    public ICollection<Image> Images { get; set; }

    private int carouselRenderIndex = -1;
    private int activeImageIndex = 0;

    private string GetActive()
    {
        string imageStateClass = string.Empty;

        carouselRenderIndex++;

        if (carouselRenderIndex == activeImageIndex)
        {
            imageStateClass = "active";
        }
        return imageStateClass;
    }

    private string ResetRenderCounter()
    {
        carouselRenderIndex = -1;
        return null;
    }

    protected void OnNextClicked()
    {
        carouselRenderIndex = -1;
        activeImageIndex += 1;
        this.StateHasChanged();
    }

    protected void OnPreviousClicked()
    {
        carouselRenderIndex = -1;
        activeImageIndex -= 1;
        this.StateHasChanged();
    }

}
