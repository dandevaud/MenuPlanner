// <auto-generated />
using System;
using MenuPlanner.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MenuPlanner.Server.Migrations
{
    [DbContext(typeof(MenuPlannerContext))]
    partial class MenuPlannerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("IngredientIngredient", b =>
                {
                    b.Property<Guid>("ChildIngredientsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ParentIngredientsId")
                        .HasColumnType("char(36)");

                    b.HasKey("ChildIngredientsId", "ParentIngredientsId");

                    b.HasIndex("ParentIngredientsId");

                    b.ToTable("IngredientIngredient");
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("CommentId");

                    b.HasIndex("MenuId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.Image", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AlternativeName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<byte[]>("ImageBytes")
                        .HasColumnType("longblob");

                    b.Property<Guid?>("MenuId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Path")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ImageId");

                    b.HasIndex("MenuId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangeDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("AverageRating")
                        .HasColumnType("double");

                    b.Property<DateTime>("ChangeDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MenuCategory")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("Portion")
                        .HasColumnType("int");

                    b.Property<string>("PortionDescription")
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35) CHARACTER SET utf8mb4");

                    b.Property<short>("Season")
                        .HasColumnType("smallint");

                    b.Property<string>("Steps")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<short>("TimeOfDay")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Video")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Votes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.MenuIngredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("QuantityAsJson")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("MenuIngredients");
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.Quantity", b =>
                {
                    b.Property<double>("QuantityValue")
                        .HasColumnType("double");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.ToTable("Quantity");
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangeDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MenuTag", b =>
                {
                    b.Property<Guid>("MenusId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("char(36)");

                    b.HasKey("MenusId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("MenuTag");
                });

            modelBuilder.Entity("IngredientIngredient", b =>
                {
                    b.HasOne("MenuPlanner.Shared.models.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("ChildIngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MenuPlanner.Shared.models.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("ParentIngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.Comment", b =>
                {
                    b.HasOne("MenuPlanner.Shared.models.Menu", "Menu")
                        .WithMany("Comments")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MenuPlanner.Shared.models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Menu");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.Image", b =>
                {
                    b.HasOne("MenuPlanner.Shared.models.Menu", null)
                        .WithMany("Images")
                        .HasForeignKey("MenuId");
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.Menu", b =>
                {
                    b.HasOne("MenuPlanner.Shared.models.User", null)
                        .WithMany("Favorites")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.MenuIngredient", b =>
                {
                    b.HasOne("MenuPlanner.Shared.models.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MenuPlanner.Shared.models.Menu", "Menu")
                        .WithMany("Ingredients")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("MenuTag", b =>
                {
                    b.HasOne("MenuPlanner.Shared.models.Menu", null)
                        .WithMany()
                        .HasForeignKey("MenusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MenuPlanner.Shared.models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.Menu", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.User", b =>
                {
                    b.Navigation("Favorites");
                });
#pragma warning restore 612, 618
        }
    }
}
