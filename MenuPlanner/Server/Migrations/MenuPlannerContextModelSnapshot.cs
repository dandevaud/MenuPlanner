// <auto-generated />
using System;
using MenuPlanner.Server.SqlImplementation;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MenuPlanner.Server.Migrations
{
    [DbContext(typeof(MenuPlannerContext))]
    partial class MenuPlannerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("IngredientIngredient", b =>
                {
                    b.Property<Guid>("ChildIngredientsIngredientId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ParentIngredientsIngredientId")
                        .HasColumnType("TEXT");

                    b.HasKey("ChildIngredientsIngredientId", "ParentIngredientsIngredientId");

                    b.HasIndex("ParentIngredientsIngredientId");

                    b.ToTable("IngredientIngredient");
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("CommentId");

                    b.HasIndex("MenuId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.Image", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AlternativeName")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("ImageBytes")
                        .HasColumnType("BLOB");

                    b.Property<Guid?>("MenuId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.HasKey("ImageId");

                    b.HasIndex("MenuId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.Ingredient", b =>
                {
                    b.Property<Guid>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Calories")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("IngredientId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.Menu", b =>
                {
                    b.Property<Guid>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("AverageRating")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MenuCategory")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<short>("Season")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Steps")
                        .HasColumnType("TEXT");

                    b.Property<short>("TimeOfDay")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Video")
                        .HasColumnType("TEXT");

                    b.Property<int>("Votes")
                        .HasColumnType("INTEGER");

                    b.HasKey("MenuId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.MenuIngredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("IngredientId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MenuId")
                        .HasColumnType("TEXT");

                    b.Property<string>("QuantityAsJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuIngredients");
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.Quantity", b =>
                {
                    b.Property<double>("QuantityValue")
                        .HasColumnType("REAL");

                    b.Property<int>("Unit")
                        .HasColumnType("INTEGER");

                    b.ToTable("Quantity");
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("IngredientIngredient", b =>
                {
                    b.HasOne("MenuPlanner.Shared.models.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("ChildIngredientsIngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MenuPlanner.Shared.models.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("ParentIngredientsIngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.Comment", b =>
                {
                    b.HasOne("MenuPlanner.Shared.models.Menu", "Menu")
                        .WithMany("Comments")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MenuPlanner.Shared.models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Menu");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.Image", b =>
                {
                    b.HasOne("MenuPlanner.Shared.models.Menu", null)
                        .WithMany("Images")
                        .HasForeignKey("MenuId");
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.Menu", b =>
                {
                    b.HasOne("MenuPlanner.Shared.models.User", null)
                        .WithMany("Favorites")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.MenuIngredient", b =>
                {
                    b.HasOne("MenuPlanner.Shared.models.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId");

                    b.HasOne("MenuPlanner.Shared.models.Menu", "Menu")
                        .WithMany("Ingredients")
                        .HasForeignKey("MenuId");

                    b.Navigation("Ingredient");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.Menu", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("MenuPlanner.Shared.models.User", b =>
                {
                    b.Navigation("Favorites");
                });
#pragma warning restore 612, 618
        }
    }
}
